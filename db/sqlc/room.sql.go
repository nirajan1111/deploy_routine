// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: room.sql

package db

import (
	"context"
	"database/sql"
)

const countRooms = `-- name: CountRooms :one
SELECT count(*) FROM room
`

func (q *Queries) CountRooms(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRooms)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO room (
    room_code,
    block_no,
    floor_no,
    screen_available,
  department
) VALUES (
    $1,
    $2,
    $3,
    $4,
   $5
) RETURNING id, room_code, block_no, department, floor_no, screen_available
`

type CreateRoomParams struct {
	RoomCode        sql.NullString `json:"room_code"`
	BlockNo         sql.NullString `json:"block_no"`
	FloorNo         sql.NullInt32  `json:"floor_no"`
	ScreenAvailable sql.NullBool   `json:"screen_available"`
	Department      sql.NullString `json:"department"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom,
		arg.RoomCode,
		arg.BlockNo,
		arg.FloorNo,
		arg.ScreenAvailable,
		arg.Department,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.RoomCode,
		&i.BlockNo,
		&i.Department,
		&i.FloorNo,
		&i.ScreenAvailable,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM room
WHERE id = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRoom, id)
	return err
}

const getRoom = `-- name: GetRoom :one
SELECT id, room_code, block_no, department, floor_no, screen_available FROM room
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoom(ctx context.Context, id int32) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.RoomCode,
		&i.BlockNo,
		&i.Department,
		&i.FloorNo,
		&i.ScreenAvailable,
	)
	return i, err
}

const getRoomsByDepartment = `-- name: GetRoomsByDepartment :many
SELECT id, room_code, block_no, department, floor_no, screen_available FROM room
WHERE department = $1
ORDER BY id
`

func (q *Queries) GetRoomsByDepartment(ctx context.Context, department sql.NullString) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getRoomsByDepartment, department)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.RoomCode,
			&i.BlockNo,
			&i.Department,
			&i.FloorNo,
			&i.ScreenAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRooms = `-- name: ListRooms :many
SELECT id, room_code, block_no, department, floor_no, screen_available FROM room
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRoomsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRooms(ctx context.Context, arg ListRoomsParams) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, listRooms, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.RoomCode,
			&i.BlockNo,
			&i.Department,
			&i.FloorNo,
			&i.ScreenAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE room
SET department = $2
  , room_code = $3
  , block_no = $4
  , floor_no = $5
  , screen_available = $6
WHERE id = $1
RETURNING id, room_code, block_no, department, floor_no, screen_available
`

type UpdateRoomParams struct {
	ID              int32          `json:"id"`
	Department      sql.NullString `json:"department"`
	RoomCode        sql.NullString `json:"room_code"`
	BlockNo         sql.NullString `json:"block_no"`
	FloorNo         sql.NullInt32  `json:"floor_no"`
	ScreenAvailable sql.NullBool   `json:"screen_available"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, updateRoom,
		arg.ID,
		arg.Department,
		arg.RoomCode,
		arg.BlockNo,
		arg.FloorNo,
		arg.ScreenAvailable,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.RoomCode,
		&i.BlockNo,
		&i.Department,
		&i.FloorNo,
		&i.ScreenAvailable,
	)
	return i, err
}
