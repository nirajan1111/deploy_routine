// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type UserRole string

const (
	UserRoleStudent UserRole = "student"
	UserRoleTeacher UserRole = "teacher"
	UserRoleAdmin   UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type OauthToken struct {
	Email        string `json:"email"`
	RefreshToken string `json:"refresh_token"`
}

type Room struct {
	ID              int32          `json:"id"`
	RoomCode        sql.NullString `json:"room_code"`
	BlockNo         sql.NullString `json:"block_no"`
	Department      sql.NullString `json:"department"`
	FloorNo         sql.NullInt32  `json:"floor_no"`
	ScreenAvailable sql.NullBool   `json:"screen_available"`
}

type Schedule struct {
	ID           int64          `json:"id"`
	GroupID      sql.NullInt64  `json:"group_id"`
	RoomID       sql.NullInt64  `json:"room_id"`
	SubjectID    sql.NullInt64  `json:"subject_id"`
	TeacherEmail sql.NullString `json:"teacher_email"`
	TimeSlot     sql.NullString `json:"time_slot"`
	Year         int32          `json:"year"`
}

type Student struct {
	ID      int64          `json:"id"`
	Name    sql.NullString `json:"name"`
	Email   sql.NullString `json:"email"`
	GroupID sql.NullInt64  `json:"group_id"`
}

type StudentSection struct {
	ID           int32          `json:"id"`
	Name         sql.NullString `json:"name"`
	Program      sql.NullString `json:"program"`
	YearEnrolled sql.NullInt32  `json:"year_enrolled"`
	GroupName    sql.NullString `json:"group_name"`
	Department   sql.NullString `json:"department"`
}

type Subject struct {
	ID          int64          `json:"id"`
	SubjectCode sql.NullString `json:"subject_code"`
	Name        sql.NullString `json:"name"`
	Department  sql.NullString `json:"department"`
}

type SubjectTeacher struct {
	SubjectID    int64  `json:"subject_id"`
	TeacherEmail string `json:"teacher_email"`
}

type Teacher struct {
	Name        sql.NullString `json:"name"`
	Email       string         `json:"email"`
	Department  sql.NullString `json:"department"`
	Designation sql.NullString `json:"designation"`
}

type User struct {
	Email          string         `json:"email"`
	Password       string         `json:"password"`
	Role           UserRole       `json:"role"`
	Provider       sql.NullString `json:"provider"`
	OauthID        sql.NullString `json:"oauth_id"`
	ProfilePicture sql.NullString `json:"profile_picture"`
	TeacherEmail   sql.NullString `json:"teacher_email"`
	StudentID      sql.NullInt64  `json:"student_id"`
}
