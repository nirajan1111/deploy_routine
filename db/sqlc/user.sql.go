// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
)

const createuser = `-- name: Createuser :one
INSERT INTO "user" (email, password, role)
VALUES ($1, $2, $3)
RETURNING email, password, role, provider, oauth_id, profile_picture, teacher_email, student_id
`

type CreateuserParams struct {
	Email    string   `json:"email"`
	Password string   `json:"password"`
	Role     UserRole `json:"role"`
}

func (q *Queries) Createuser(ctx context.Context, arg CreateuserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createuser, arg.Email, arg.Password, arg.Role)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Provider,
		&i.OauthID,
		&i.ProfilePicture,
		&i.TeacherEmail,
		&i.StudentID,
	)
	return i, err
}

const deleteuserByEmail = `-- name: DeleteuserByEmail :exec
DELETE FROM "user" WHERE email = $1
RETURNING email, password, role, provider, oauth_id, profile_picture, teacher_email, student_id
`

func (q *Queries) DeleteuserByEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteuserByEmail, email)
	return err
}

const getuserByEmail = `-- name: GetuserByEmail :one
SELECT email, password, role, provider, oauth_id, profile_picture, teacher_email, student_id FROM "user" WHERE email = $1
`

func (q *Queries) GetuserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getuserByEmail, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Provider,
		&i.OauthID,
		&i.ProfilePicture,
		&i.TeacherEmail,
		&i.StudentID,
	)
	return i, err
}

const getusers = `-- name: Getusers :many
SELECT email, password, role, provider, oauth_id, profile_picture, teacher_email, student_id FROM "user" LIMIT $1 OFFSET $2
`

type GetusersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) Getusers(ctx context.Context, arg GetusersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getusers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Email,
			&i.Password,
			&i.Role,
			&i.Provider,
			&i.OauthID,
			&i.ProfilePicture,
			&i.TeacherEmail,
			&i.StudentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateuserByEmail = `-- name: UpdateuserByEmail :exec
UPDATE "user"
SET email = $2, password = $3, role = $4
WHERE email = $1
RETURNING email, password, role, provider, oauth_id, profile_picture, teacher_email, student_id
`

type UpdateuserByEmailParams struct {
	Email    string   `json:"email"`
	Email_2  string   `json:"email_2"`
	Password string   `json:"password"`
	Role     UserRole `json:"role"`
}

func (q *Queries) UpdateuserByEmail(ctx context.Context, arg UpdateuserByEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateuserByEmail,
		arg.Email,
		arg.Email_2,
		arg.Password,
		arg.Role,
	)
	return err
}
