// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: student_section.sql

package db

import (
	"context"
	"database/sql"
)

const countStudentSections = `-- name: CountStudentSections :one
SELECT count(*) FROM student_section
`

func (q *Queries) CountStudentSections(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countStudentSections)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createStudentSection = `-- name: CreateStudentSection :one
INSERT INTO student_section (
  name,
  program,
  year_enrolled,
  group_name,
  department
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, name, program, year_enrolled, group_name, department
`

type CreateStudentSectionParams struct {
	Name         sql.NullString `json:"name"`
	Program      sql.NullString `json:"program"`
	YearEnrolled sql.NullInt32  `json:"year_enrolled"`
	GroupName    sql.NullString `json:"group_name"`
	Department   sql.NullString `json:"department"`
}

func (q *Queries) CreateStudentSection(ctx context.Context, arg CreateStudentSectionParams) (StudentSection, error) {
	row := q.db.QueryRowContext(ctx, createStudentSection,
		arg.Name,
		arg.Program,
		arg.YearEnrolled,
		arg.GroupName,
		arg.Department,
	)
	var i StudentSection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Program,
		&i.YearEnrolled,
		&i.GroupName,
		&i.Department,
	)
	return i, err
}

const deleteStudentSection = `-- name: DeleteStudentSection :exec
DELETE FROM student_section
WHERE id = $1
`

func (q *Queries) DeleteStudentSection(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteStudentSection, id)
	return err
}

const getStudentSection = `-- name: GetStudentSection :one
SELECT id, name, program, year_enrolled, group_name, department FROM student_section
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStudentSection(ctx context.Context, id int32) (StudentSection, error) {
	row := q.db.QueryRowContext(ctx, getStudentSection, id)
	var i StudentSection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Program,
		&i.YearEnrolled,
		&i.GroupName,
		&i.Department,
	)
	return i, err
}

const getStudentSectionsByDepartment = `-- name: GetStudentSectionsByDepartment :many
SELECT id, name, program, year_enrolled, group_name, department FROM student_section
WHERE department = $1
ORDER BY id
`

func (q *Queries) GetStudentSectionsByDepartment(ctx context.Context, department sql.NullString) ([]StudentSection, error) {
	rows, err := q.db.QueryContext(ctx, getStudentSectionsByDepartment, department)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentSection
	for rows.Next() {
		var i StudentSection
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Program,
			&i.YearEnrolled,
			&i.GroupName,
			&i.Department,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentSectionsByProgram = `-- name: GetStudentSectionsByProgram :many
SELECT id, name, program, year_enrolled, group_name, department FROM student_section
WHERE program = $1
ORDER BY id
`

func (q *Queries) GetStudentSectionsByProgram(ctx context.Context, program sql.NullString) ([]StudentSection, error) {
	rows, err := q.db.QueryContext(ctx, getStudentSectionsByProgram, program)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentSection
	for rows.Next() {
		var i StudentSection
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Program,
			&i.YearEnrolled,
			&i.GroupName,
			&i.Department,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentSectionsByYear = `-- name: GetStudentSectionsByYear :many
SELECT id, name, program, year_enrolled, group_name, department FROM student_section
WHERE year_enrolled = $1
ORDER BY id
`

func (q *Queries) GetStudentSectionsByYear(ctx context.Context, yearEnrolled sql.NullInt32) ([]StudentSection, error) {
	rows, err := q.db.QueryContext(ctx, getStudentSectionsByYear, yearEnrolled)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentSection
	for rows.Next() {
		var i StudentSection
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Program,
			&i.YearEnrolled,
			&i.GroupName,
			&i.Department,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentsInSection = `-- name: GetStudentsInSection :many
SELECT s.id, s.name, s.email, s.group_id FROM student s
JOIN student_section ss ON s.group_id = ss.id
WHERE ss.id = $1
ORDER BY s.id
`

func (q *Queries) GetStudentsInSection(ctx context.Context, id int32) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getStudentsInSection, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.GroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudentSections = `-- name: ListStudentSections :many
SELECT id, name, program, year_enrolled, group_name, department FROM student_section
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListStudentSectionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStudentSections(ctx context.Context, arg ListStudentSectionsParams) ([]StudentSection, error) {
	rows, err := q.db.QueryContext(ctx, listStudentSections, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentSection
	for rows.Next() {
		var i StudentSection
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Program,
			&i.YearEnrolled,
			&i.GroupName,
			&i.Department,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudentSection = `-- name: UpdateStudentSection :one
UPDATE student_section
SET name = $2,
    program = $3,
    year_enrolled = $4,
    group_name = $5,
    department = $6
WHERE id = $1
RETURNING id, name, program, year_enrolled, group_name, department
`

type UpdateStudentSectionParams struct {
	ID           int32          `json:"id"`
	Name         sql.NullString `json:"name"`
	Program      sql.NullString `json:"program"`
	YearEnrolled sql.NullInt32  `json:"year_enrolled"`
	GroupName    sql.NullString `json:"group_name"`
	Department   sql.NullString `json:"department"`
}

func (q *Queries) UpdateStudentSection(ctx context.Context, arg UpdateStudentSectionParams) (StudentSection, error) {
	row := q.db.QueryRowContext(ctx, updateStudentSection,
		arg.ID,
		arg.Name,
		arg.Program,
		arg.YearEnrolled,
		arg.GroupName,
		arg.Department,
	)
	var i StudentSection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Program,
		&i.YearEnrolled,
		&i.GroupName,
		&i.Department,
	)
	return i, err
}
