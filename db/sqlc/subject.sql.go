// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subject.sql

package db

import (
	"context"
	"database/sql"
)

const assignTeacherToSubject = `-- name: AssignTeacherToSubject :exec
INSERT INTO subject_teachers (
  subject_id,
  teacher_email
) VALUES (
  $1, $2
)
`

type AssignTeacherToSubjectParams struct {
	SubjectID    int64  `json:"subject_id"`
	TeacherEmail string `json:"teacher_email"`
}

func (q *Queries) AssignTeacherToSubject(ctx context.Context, arg AssignTeacherToSubjectParams) error {
	_, err := q.db.ExecContext(ctx, assignTeacherToSubject, arg.SubjectID, arg.TeacherEmail)
	return err
}

const countSubjects = `-- name: CountSubjects :one
SELECT count(*) FROM subject
`

func (q *Queries) CountSubjects(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSubjects)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSubject = `-- name: CreateSubject :one
INSERT INTO subject (

  subject_code,
  name,
  department
) VALUES (
   $1, $2, $3
) RETURNING id, subject_code, name, department
`

type CreateSubjectParams struct {
	SubjectCode sql.NullString `json:"subject_code"`
	Name        sql.NullString `json:"name"`
	Department  sql.NullString `json:"department"`
}

func (q *Queries) CreateSubject(ctx context.Context, arg CreateSubjectParams) (Subject, error) {
	row := q.db.QueryRowContext(ctx, createSubject, arg.SubjectCode, arg.Name, arg.Department)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.SubjectCode,
		&i.Name,
		&i.Department,
	)
	return i, err
}

const deleteSubject = `-- name: DeleteSubject :exec
DELETE FROM subject
WHERE id = $1
`

func (q *Queries) DeleteSubject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSubject, id)
	return err
}

const getAssignedTeachers = `-- name: GetAssignedTeachers :many
SELECT st.subject_id, st.teacher_email, t.name AS teacher_name , t.designation , t.department 
FROM subject_teachers st
JOIN teacher t ON st.teacher_email = t.email
WHERE st.subject_id = $1
ORDER BY st.subject_id, st.teacher_email
`

type GetAssignedTeachersRow struct {
	SubjectID    int64          `json:"subject_id"`
	TeacherEmail string         `json:"teacher_email"`
	TeacherName  sql.NullString `json:"teacher_name"`
	Designation  sql.NullString `json:"designation"`
	Department   sql.NullString `json:"department"`
}

func (q *Queries) GetAssignedTeachers(ctx context.Context, subjectID int64) ([]GetAssignedTeachersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAssignedTeachers, subjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAssignedTeachersRow
	for rows.Next() {
		var i GetAssignedTeachersRow
		if err := rows.Scan(
			&i.SubjectID,
			&i.TeacherEmail,
			&i.TeacherName,
			&i.Designation,
			&i.Department,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubject = `-- name: GetSubject :one
SELECT id, subject_code, name, department FROM subject
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubject(ctx context.Context, id int64) (Subject, error) {
	row := q.db.QueryRowContext(ctx, getSubject, id)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.SubjectCode,
		&i.Name,
		&i.Department,
	)
	return i, err
}

const getSubjectByCode = `-- name: GetSubjectByCode :one
SELECT id, subject_code, name, department FROM subject
WHERE subject_code = $1 LIMIT 1
`

func (q *Queries) GetSubjectByCode(ctx context.Context, subjectCode sql.NullString) (Subject, error) {
	row := q.db.QueryRowContext(ctx, getSubjectByCode, subjectCode)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.SubjectCode,
		&i.Name,
		&i.Department,
	)
	return i, err
}

const getSubjectTeachers = `-- name: GetSubjectTeachers :many
SELECT t.name, t.email, t.department, t.designation FROM teacher t
JOIN subject_teachers st ON t.email = st.teacher_email
WHERE st.subject_id = $1
`

func (q *Queries) GetSubjectTeachers(ctx context.Context, subjectID int64) ([]Teacher, error) {
	rows, err := q.db.QueryContext(ctx, getSubjectTeachers, subjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Teacher
	for rows.Next() {
		var i Teacher
		if err := rows.Scan(
			&i.Name,
			&i.Email,
			&i.Department,
			&i.Designation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubjectsByDepartment = `-- name: GetSubjectsByDepartment :many
SELECT id, subject_code, name, department FROM subject
WHERE department = $1
ORDER BY id
`

func (q *Queries) GetSubjectsByDepartment(ctx context.Context, department sql.NullString) ([]Subject, error) {
	rows, err := q.db.QueryContext(ctx, getSubjectsByDepartment, department)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.SubjectCode,
			&i.Name,
			&i.Department,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubjects = `-- name: ListSubjects :many
SELECT id, subject_code, name, department FROM subject
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSubjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSubjects(ctx context.Context, arg ListSubjectsParams) ([]Subject, error) {
	rows, err := q.db.QueryContext(ctx, listSubjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.SubjectCode,
			&i.Name,
			&i.Department,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTeacherFromSubject = `-- name: RemoveTeacherFromSubject :exec
DELETE FROM subject_teachers
WHERE subject_id = $1 AND teacher_email = $2
`

type RemoveTeacherFromSubjectParams struct {
	SubjectID    int64  `json:"subject_id"`
	TeacherEmail string `json:"teacher_email"`
}

func (q *Queries) RemoveTeacherFromSubject(ctx context.Context, arg RemoveTeacherFromSubjectParams) error {
	_, err := q.db.ExecContext(ctx, removeTeacherFromSubject, arg.SubjectID, arg.TeacherEmail)
	return err
}

const updateSubject = `-- name: UpdateSubject :one
UPDATE subject
SET subject_code = $2,
    name = $3,
    department = $4
WHERE id = $1
RETURNING id, subject_code, name, department
`

type UpdateSubjectParams struct {
	ID          int64          `json:"id"`
	SubjectCode sql.NullString `json:"subject_code"`
	Name        sql.NullString `json:"name"`
	Department  sql.NullString `json:"department"`
}

func (q *Queries) UpdateSubject(ctx context.Context, arg UpdateSubjectParams) (Subject, error) {
	row := q.db.QueryRowContext(ctx, updateSubject,
		arg.ID,
		arg.SubjectCode,
		arg.Name,
		arg.Department,
	)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.SubjectCode,
		&i.Name,
		&i.Department,
	)
	return i, err
}
